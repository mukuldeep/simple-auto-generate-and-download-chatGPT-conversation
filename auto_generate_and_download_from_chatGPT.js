/*
 *  This program can communicate with chatGPT and scrap the generated response.
 *  you have to fill the qrs below with your queries and run it in console.
 *  It will generate response and download response with some relevant html tags automatically.
 *
 *	This is only for educational purposes. Donot use for any other purpose.
 *  The user is solely responsible for it's usage.
 */


/* ########################## Config ############################### */

//put queries here in the array
var qrs=[
"write hello world program in COBOL",
"How do I mock an external dependency in Rust",
"BTW who is Mukuldeep Maiti?",
"strategy for India to be world's number 1 economy",
"write travelling salesman problem solution with example in python"
]
 
var query_pre=""; // additional pre-string to add in every query like 'tell me about'
var query_post="";// additional post-string to add in every query like 'with example'

// wait after asking next query to chatGPT
let wait_time_after_every_download = 10000; //10000ms = 10sec

/* ####################### Default Config ########################## */

var state="init";
var curr_query="";
var curr_q_index=-1;
var wait_for_completion_timeout_time=3000; //3000ms = 3sec

/* start a single querying */
ask_chatGPT=(query)=>{
	curr_query=query;
	/* This node tree may not work if UI changes */
	var frm=document.getElementsByTagName("form")[0].children[0].children[1].children;
	frm[0].value=query;
	frm[1].disabled=false;
	frm[1].click();
	wait_for_completion();
}

/* Wait while ChatGPT generating the response */
wait_for_completion=()=>{
	var btn=document.getElementsByTagName("form")[0].children[0].children[0].children[0];
	if(btn!=undefined){
		var btn_text=btn.innerText;
		if(btn_text=="Regenerate response"){
			if(state == "generating")
				state="generated";
		}else if(btn_text=="Stop generating"){
			state="generating";
		}
	}else{
		if(state=="generating"){
			state="generated";
		}
	}
	console.log(state);
	if(state=="generated"){
		sanitized_post=get_last_ans();
		download("gpt_"+curr_query+".txt","<title>"+curr_query+"</title>\n"+sanitized_post);
		//run_next_query();
		setTimeout(run_next_query,wait_time_after_every_download);
		return;
	}
	//console.log("response not ready");
	setTimeout(wait_for_completion,wait_for_completion_timeout_time);
}

/* Scrap the response generated by the ChatGPT for recent asked query */
get_last_ans=()=>{
	state="init";
	console.log("get_last_ans called");
	/* This node tree may not work if UI changes */ 
	var qna=document.getElementsByTagName("main")[0].children[1].children[0].children[0].children[0];
	/* This node tree may not work if UI changes */
	var l_ans=qna.children[qna.childElementCount-2].children[0].children[1].children[0].children[0].children[0];
	console.log(l_ans);
	
	var sanitized_post="";
	for( i=0;i<l_ans.childElementCount;i++){
		console.log(l_ans.children[i].tagName);
		var curr_el_s_post="";
		var curr_tag_name=l_ans.children[i].tagName.toLowerCase();
		if(l_ans.children[i].tagName=="PRE"){
			var pre_text=l_ans.children[i].textContent;
			var pre_text_split=pre_text.split("Copy code");
			var pre_language=pre_text_split[0];
			console.log(pre_language,pre_text_split);
			curr_el_s_post="<pre><code>\n"+pre_text_split[1]+"\n</code></pre>\n"
		}else{
			
			curr_el_s_post="<"+curr_tag_name+">"+l_ans.children[i].getInnerHTML()+"</"+curr_tag_name+">\n";
		}
		console.log(curr_el_s_post);
		sanitized_post+=curr_el_s_post;
	}
	console.log(sanitized_post);
	return sanitized_post;
}

/* Download file with filename in parameter and content as the text content passed to text in the parameter. */
download=(filename, text)=>{
  var el = document.createElement('a');
  el.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
  el.setAttribute('download', filename);
  el.style.display = 'none';
  document.body.appendChild(el);
  el.click();
  document.body.removeChild(el);
}

/* Run the next query in the array. */
run_next_query=()=>{
	if( qrs.length > curr_q_index+1 ){
		curr_q_index+=1;
		ask_chatGPT(query_pre+qrs[curr_q_index]+query_post);
	}else{
			curr_q_index=-1;
			qrs=[];
	}
}
run_next_query();

